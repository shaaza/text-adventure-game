(defparameter *nodes* '((garden (There is a beautiful garden)) (living-room (There is an old man sleeping on the couch)) (attic (There is a lot of dust and mangoes))))  (defun describe-location (location nodes) (cadr (assoc location nodes)))  (defparameter *edges* '((garden (living-room west door)) (living-room (attic north ladder) (garden east door) ) (attic (living-room south ladder))))  (defun describe-path (edge) `(There is a ,(cadr edge) going ,(caddr edge) from here.) )  (defun describe-paths (location edges) (apply #'append (mapcar #'describe-path (cdr (assoc location edges)))))   (defparameter *objects* '(whiskey bucket mop toy))  (defparameter *object-locations* '((living-room (whiskey)) (garden (mop) (bucket)) (attic (toy))))  (defun describe-object (objects) `(There is a ,(car objects) on the floor.))  (defun objects-at (location object-locations) (mapcar #'car (cdr (assoc location object-locations))))  (defun describe-objects (location object-locations) (apply #'append (mapcar #'describe-object (cdr (assoc location object-locations)))))  (defparameter *location* 'living-room)  (defun look () (append (describe-location *location* *nodes*) (describe-paths *location* *edges*) (describe-objects *location* *object-locations*)))  (defun walk (direction) (let ((next (find direction (cdr (assoc *location* *edges*)) :key #'cadr))) (if next (progn (setf *location* (car next)) (look)) '(You cannot go that way))))  (defun pickup (object) (cond ((member object (objects-at *location* *object-locations*)) (push `(body ,(list object)) *object-locations*) '(You are now carrying the object.)) (t '(You cannot pickup that object.))))  (defparameter *inventory* '())  (defun inventory () (cond ((assoc 'body *object-locations*) (push (cdr (assoc 'body *object-locations*)) *inventory*))) (append '(Items-) *inventory*)) (defun game-repl () (let ((cmd (game-read))) (unless (eq (car cmd) 'quit) (game-print (game-eval cmd)) (game-repl))))  (defun game-read () (let ((input (read-line))) (cond (input (let ((stringd (read-from-string (concatenate 'string "(" input ")")))) (flet ((quote-it (x) (list 'quote x))) (cons (car stringd) (mapcar #'quote-it (cdr stringd)))))))))  (defparameter *allowed-commands* '(walk look pickup quit inventory))  (defun game-eval (command) (cond ((member (car command) *allowed-commands*) (eval command)) (t '(i do not know that command.))))  (defun tweak-text (lst caps lit) (when lst (let ((item (car lst)) (rest (cdr lst))) (cond ((eq item #\space) (cons item (tweak-text rest caps lit))) ((member item '(#\? #\! #\.)) (cons item (tweak-text rest t lit))) ((eq item #\") (tweak-text rest caps (not lit))) (lit (cons item (tweak-text rest nil lit))) (caps (cons (char-upcase item) (tweak-text rest nil lit))) (t (cons (char-downcase item) (tweak-text rest nil nil))) ))))  (defun game-print (toprint) (princ (coerce (tweak-text (coerce (string-trim "()" (prin1-to-string toprint)) 'list) t nil) 'string)) (fresh-line)) (game-repl)